self_lookup = " --self-lookup" if config["self_lookup"] == True else ""

rule build_AGG:
    input:
        search = "{prefix}_knot/ext_search.csv",
        ovl_graph = "{prefix}_knot/raw_reads_splited_filtred.gfa",
        read2asm = "{prefix}_knot/read2asm.paf",
        asm_graph = "{prefix}_knot/contigs_graph.gfa",
        tig2tig = "{prefix}_knot/contigs_filtred.gfa",

    output:
        "{prefix}_AAG.csv"

    shell:
        "knot.path_search {input.search} {output} {input.ovl_graph} {input.read2asm} {input.asm_graph} {input.tig2tig} --search-mode " + config["search_mode"] + self_lookup


rule filter_contigs:
    input:
        "{prefix}contigs.fasta"
    
    output:
        "{prefix}contigs_filtred.fasta"
    
    shell:
        "knot.filter_tig {input} {output} -t " + str(config['min_contig_length'])


rule map_contigs2contigs:
    input:
        "{prefix}contigs_filtred.fasta"

    output:
        "{prefix}contigs_filtred.paf"

    threads:
        8

    shell:
        " ".join([config["minimap"]["bin"],
                  config["minimap"]["map_option"]+config["read_type"],
                  "-t", "{threads}",
                  "{input}", "{input}",
                  ">", "{output}"
                ])


rule map_read2contigs:
    input:
        asm = "{prefix}contigs_filtred.fasta",
        read = "{prefix}raw_reads_splited.fasta"

    output:
        "{prefix}read2asm.paf"

    threads:
        8

    shell:
        " ".join([config["minimap"]["bin"],
                  config["minimap"]["map_option"]+config["read_type"],
                  "-t", "{threads}",
                  "{input.asm}", "{input.read}",
                  ">", "{output}"
                ])


rule filter_reads:
    input:
        mapping = "{prefix}read2asm.paf",
        read = "{prefix}raw_reads_splited.fasta"

    output:
        "{prefix}raw_reads_splited_filtred.fasta"

    shell:
        "knot.sg_generation {input.mapping} {input.read} {output}"


rule find_extremity:
    input:
        read2asm = "{prefix}read2asm.paf",
        read2read = "{prefix}raw_reads_splited_filtred.gfa"

    output:
        "{prefix}ext_search.csv"

    shell:
        "knot.extremity_search {input.read2asm} {input.read2read} {output}"


